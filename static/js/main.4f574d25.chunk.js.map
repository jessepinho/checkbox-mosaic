{"version":3,"sources":["components/CheckboxGrid/index.tsx","components/CheckboxGrid/CheckboxGridFirebaseContainer.tsx","components/App/index.tsx","serviceWorker.ts","index.tsx"],"names":["DIMENSIONS","CheckboxGrid","_ref","_ref$checked","checked","toggleCheckbox","react_default","a","createElement","className","Array","fill","map","_","yIndex","xIndex","coordinates","concat","getCoordinates","type","key","onChange","CheckboxGridFirebaseContainer","sandboxRef","useFirebaseApp","firestore","collection","doc","useFirestoreDoc","data","components_CheckboxGrid","set","Object","objectSpread","defineProperty","firebaseConfig","projectId","App","reactfire_firebaseApp","initPerformance","performance","fallback","traceId","CheckboxGrid_CheckboxGridFirebaseContainer","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2RAKMA,SAAsB,IAAtBA,EAAkC,GAiCzBC,EAzBV,SAAAC,GAAsC,IAAAC,EAAAD,EAAnCE,eAAmC,IAAAD,EAAzB,GAAyBA,EAArBE,EAAqBH,EAArBG,eACpB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACZC,MAAMV,GACJW,KAAK,MACLC,IAAI,SAACC,EAAGC,GACP,OAAOJ,MAAMV,GACVW,KAAK,MACLC,IAAI,SAACC,EAAGE,GACP,IAAMC,EAfG,SAACD,EAAgBD,GAAjB,SAAAG,OAClBF,EADkB,KAAAE,OACRH,GAcmBI,CAAeH,EAAQD,GAC3C,OACER,EAAAC,EAAAC,cAAA,SACEW,KAAK,WACLC,IAAKJ,EACLP,UAAU,yBACVL,UAAWA,EAAQY,GACnBK,SAAU,kBAAMhB,EAAeW,YCHlCM,EApBqC,WAClD,IACMC,EADcC,cAEjBC,YACAC,WAAW,WACXC,IAAI,WAGDvB,EADUwB,YAAqBL,GACJM,OASjC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,CAAc1B,QAASA,EAASC,eAPhB,SAACW,GACtBO,EAAWQ,IAAXC,OAAAC,EAAA,EAAAD,CAAA,GACK5B,EADL4B,OAAAE,EAAA,EAAAF,CAAA,GAEGhB,GAAeZ,EAAQY,UCRxBmB,SAAiB,CAAEC,UAAW,oBAarBC,EAXO,kBACpB/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,CAAqBH,eAAgBA,EAAgBI,iBAAe,GAClEjC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CACEC,SAAUnC,EAAAC,EAAAC,cAACsB,EAAD,CAAczB,eAAgB,eACxCqC,QAAQ,cAERpC,EAAAC,EAAAC,cAACmC,EAAD,eCPcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4f574d25.chunk.js","sourcesContent":["import React from 'react'\n\nimport { Checked } from './types'\nimport './styles.css'\n\nconst DIMENSIONS = { width: 40, height: 40 }\n\nconst getCoordinates = (xIndex: number, yIndex: number): string =>\n  `${xIndex},${yIndex}`\n\nconst CheckboxGrid: React.FC<{\n  checked?: Checked\n  toggleCheckbox: (coordinates: string) => void\n}> = ({ checked = {}, toggleCheckbox }) => {\n  return (\n    <div className=\"CheckboxGrid\">\n      {Array(DIMENSIONS.width)\n        .fill(null)\n        .map((_, yIndex) => {\n          return Array(DIMENSIONS.height)\n            .fill(null)\n            .map((_, xIndex) => {\n              const coordinates = getCoordinates(xIndex, yIndex)\n              return (\n                <input\n                  type=\"checkbox\"\n                  key={coordinates}\n                  className=\"CheckboxGrid__checkbox\"\n                  checked={!!checked[coordinates]}\n                  onChange={() => toggleCheckbox(coordinates)}\n                />\n              )\n            })\n        })}\n    </div>\n  )\n}\n\nexport default CheckboxGrid\n","import React from 'react'\nimport { useFirebaseApp, useFirestoreDoc } from 'reactfire'\n\nimport CheckboxGrid from '.'\nimport { Checked } from './types'\n\nconst CheckboxGridFirebaseContainer: React.FC<{}> = () => {\n  const firebaseApp = useFirebaseApp()\n  const sandboxRef = firebaseApp\n    .firestore()\n    .collection('mosaics')\n    .doc('sandbox')\n\n  const sandbox = useFirestoreDoc<any>(sandboxRef)\n  const checked: Checked = sandbox.data()\n\n  const toggleCheckbox = (coordinates: string) => {\n    sandboxRef.set({\n      ...checked,\n      [coordinates]: !checked[coordinates],\n    })\n  }\n\n  return <CheckboxGrid checked={checked} toggleCheckbox={toggleCheckbox} />\n}\n\nexport default CheckboxGridFirebaseContainer\n","import { FirebaseAppProvider } from 'reactfire/firebaseApp'\nimport { SuspenseWithPerf } from 'reactfire/performance'\nimport 'firebase/firestore'\nimport 'firebase/performance'\n\nimport React from 'react'\n\nimport CheckboxGridFirebaseContainer from '../CheckboxGrid/CheckboxGridFirebaseContainer'\nimport './styles.css'\nimport CheckboxGrid from '../CheckboxGrid'\n\nconst firebaseConfig = { projectId: 'checkbox-mosaic' }\n\nconst App: React.FC = () => (\n  <FirebaseAppProvider firebaseConfig={firebaseConfig} initPerformance>\n    <SuspenseWithPerf\n      fallback={<CheckboxGrid toggleCheckbox={() => {}} />}\n      traceId=\"loadMosaic\"\n    >\n      <CheckboxGridFirebaseContainer />\n    </SuspenseWithPerf>\n  </FirebaseAppProvider>\n)\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href,\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\nimport './reset.css'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}